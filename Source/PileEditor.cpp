//Jason Wrinkle - Solitaire Game 
//Copyright (C) 1999  Jason Wrinkle (jwrinkle@utdallas.edu)
//
//This program is free software; you can redistribute it and/or 
//modify it under the terms of the GNU General Public License 
//as published by the Free Software Foundation; either version 2 
//of the License, or (at your option) any later version. 
//
//This program is distributed in the hope that it will be useful, 
//but WITHOUT ANY WARRANTY; without even the implied warranty of 
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
//GNU General Public License for more details. 
//
//You should have received a copy of the GNU General Public License 
//along with this program; if not, write to the Free Software 
//Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. 


// PileEditor.cpp
// Generated by Interface Elements (Window v2.3) on Mar 12 1999
// This is a user written class and will not be overwritten.

#include "PileEditor.h"


PileEditor::PileEditor(void)
	: IEWindow("Pile_Editor")
{
	BMenuField* menu;
	BMessage* msg;
	BMenuItem* menuitem;	

	menu = static_cast <BMenuField*> (FindView("Accept On Empty - Value"));
	msg = new BMessage(IE_PILEEDITOR_ACCEPTONEMPTYVALUE_TOGGLE_ALL);
	menuitem = menu->Menu()->FindItem(IE_PILEEDITOR_ACCEPTONEMPTYVALUE_TOGGLE_ALL);
	menuitem->SetMessage(msg);

	menu = static_cast <BMenuField*> (FindView("Accept On Empty - Suit"));
	msg = new BMessage(IE_PILEEDITOR_ACCEPTONEMPTYSUIT_TOGGLE_ALL);
	menuitem = menu->Menu()->FindItem(IE_PILEEDITOR_ACCEPTONEMPTYSUIT_TOGGLE_ALL);
	menuitem->SetMessage(msg);

	menu = static_cast <BMenuField*> (FindView("Pile Ordering - Value Steps"));
	msg = new BMessage(IE_PILEEDITOR_PILEORDERINGVALUESTEPS_TOGGLE_ALL);
	menuitem = menu->Menu()->FindItem(IE_PILEEDITOR_PILEORDERINGVALUESTEPS_TOGGLE_ALL);
	menuitem->SetMessage(msg);
	menuitem->SetEnabled(true);

	menu = static_cast <BMenuField*> (FindView("Pile Ordering - Suit Steps"));
	msg = new BMessage(IE_PILEEDITOR_PILEORDERINGSUITSTEPS_TOGGLE_ALL);
	menuitem = menu->Menu()->FindItem(IE_PILEEDITOR_PILEORDERINGSUITSTEPS_TOGGLE_ALL);
	menuitem->SetMessage(msg);
	menuitem->SetEnabled(true);

	current_props = new pile_props();
}



PileEditor::~PileEditor(void)
{
}

void PileEditor::Reset()
{
	Lock();
	char* tempstr;	
	BTextControl* temptxt;
	BCheckBox* tempchk;
	BRadioButton* tempradbut;
	BMenuField* tempfield;
	BMenuItem* tempitem;
	list<int32>::iterator iter;
	int numitems;	

//AOE		

	tempfield = static_cast <BMenuField*> (FindView("Accept On Empty - Value"));
	tempfield->SetEnabled(true);
	numitems = tempfield->Menu()->CountItems();
	
	for (int i = 0; i < numitems; i++) tempfield->Menu()->ItemAt(i)->SetMarked(false);
	
	iter = current_props->emptyacceptvalue.begin();
	while (iter != current_props->emptyacceptvalue.end())
	{
		tempfield->Menu()->FindItem(Int32ToStr(*iter))->SetMarked(true);
		iter++;
	};

	tempfield = static_cast <BMenuField*> (FindView("Accept On Empty - Suit"));
	tempfield->SetEnabled(true);
	numitems = tempfield->Menu()->CountItems();
	
	for (int i = 0; i < numitems; i++) tempfield->Menu()->ItemAt(i)->SetMarked(false);
	
	iter = current_props->emptyacceptsuit.begin();
	while (iter != current_props->emptyacceptsuit.end())
	{
		tempfield->Menu()->FindItem(Int32ToStr(*iter))->SetMarked(true);
		iter++;
	};

	if (current_props->ordering == NULL) 
	{
		tempradbut = static_cast <BRadioButton*> (FindView("Pile Ordering - None"));

		tempchk = static_cast <BCheckBox*> (FindView("cycle suits"));
		tempchk->SetEnabled(false);

		tempchk = static_cast <BCheckBox*> (FindView("cycle values"));
		tempchk->SetEnabled(false);

		tempfield = static_cast <BMenuField*> (FindView("Pile Ordering - Suit Steps"));
		tempfield->SetEnabled(false);

		tempfield = static_cast <BMenuField*> (FindView("Pile Ordering - Value Steps"));
		tempfield->SetEnabled(false);
	}
	else
	{
		tempradbut = static_cast <BRadioButton*> (FindView("Pile Ordering - Some"));

		tempchk = static_cast <BCheckBox*> (FindView("cycle suits"));
		tempchk->SetEnabled(true);
		tempchk->SetValue(current_props->ordering->cyclesuits);
		
		tempchk = static_cast <BCheckBox*> (FindView("cycle values"));
		tempchk->SetEnabled(true);
		tempchk->SetValue(current_props->ordering->cyclevalues);		

		tempfield = static_cast <BMenuField*> (FindView("Pile Ordering - Suit Steps"));
		tempfield->SetEnabled(true);
		numitems = tempfield->Menu()->CountItems();
		
		for (int i = 0; i < numitems; i++) tempfield->Menu()->ItemAt(i)->SetMarked(false);
		
		iter = current_props->ordering->suitsteps.begin();
		while (iter != current_props->ordering->suitsteps.end())
		{
			tempfield->Menu()->FindItem(Int32ToStr(*iter))->SetMarked(true);
			iter++;
		};

		tempfield = static_cast <BMenuField*> (FindView("Pile Ordering - Value Steps"));
		tempfield->SetEnabled(true);
		numitems = tempfield->Menu()->CountItems();
		
		for (int i = 0; i < numitems; i++) tempfield->Menu()->ItemAt(i)->SetMarked(false);
		
		iter = current_props->ordering->valuesteps.begin();
		while (iter != current_props->ordering->valuesteps.end())
		{
			tempfield->Menu()->FindItem(Int32ToStr(*iter))->SetMarked(true);
			iter++;
		};
	};
	tempradbut->SetValue(1);
	
	if (current_props->popping != NULL) 
	{
		tempitem = tempfield->Menu()->FindItem( (const char*) current_props->popping->toID );
		if (tempitem) tempitem->SetMarked(true);
		else
		{//user dialog in here
			beep();
			BMessage tempmsg(IE_PILEEDITOR_CARDPOPPINGNONE);
			MessageReceived(&tempmsg);
		};
	};
	if (current_props->popping == NULL) 
	{
		tempradbut = static_cast <BRadioButton*> (FindView("Card Popping - None"));

		temptxt = static_cast <BTextControl*> (FindView("Card Popping - # times"));
		temptxt->SetEnabled(false);

		temptxt = static_cast <BTextControl*> (FindView("Card Popping - numcards"));
		temptxt->SetEnabled(false);

		tempfield = static_cast <BMenuField*> (FindView("Card Popping - To"));
		tempfield->SetEnabled(false);
	}
	else
	{
		tempradbut = static_cast <BRadioButton*> (FindView("Card Popping - Some"));
		
		temptxt = static_cast <BTextControl*> (FindView("Card Popping - # times"));
		temptxt->SetEnabled(true);
		temptxt->SetText( Int32ToStr(current_props->popping->numtimes) );

		temptxt = static_cast <BTextControl*> (FindView("Card Popping - numcards"));
		temptxt->SetEnabled(true);
		temptxt->SetText( Int32ToStr(current_props->popping->numcards) );

		tempfield = static_cast <BMenuField*> (FindView("Card Popping - To"));
		tempfield->SetEnabled(true);
	};
	tempradbut->SetValue(1);
	
	temptxt = static_cast <BTextControl*> (FindView("Scoring - Add"));
	temptxt->SetText( Int32ToStr(current_props->ptaddcards) );

	temptxt = static_cast <BTextControl*> (FindView("Scoring - Remove"));
	temptxt->SetText( Int32ToStr(current_props->ptremovecards) );
		
	tempchk = static_cast <BCheckBox*> (FindView("Empty on Win"));
	tempchk->SetValue(current_props->emptyonwin);

	temptxt = static_cast <BTextControl*> (FindView("New Cards - Offsetup"));
	tempstr = mystrconcat("(", IntToStr((int16) current_props->offsetup.x));
	tempstr = mystrconcat(tempstr, ",");
	tempstr = mystrconcat(tempstr, IntToStr((int16) current_props->offsetup.y));
	tempstr = mystrconcat(tempstr, ")");
	temptxt->SetText(tempstr);
	
	temptxt = static_cast <BTextControl*> (FindView("New Cards - Offsetdown"));
	tempstr = mystrconcat("(", IntToStr((int16) current_props->offsetdown.x));
	tempstr = mystrconcat(tempstr, ",");
	tempstr = mystrconcat(tempstr, IntToStr((int16) current_props->offsetdown.y));
	tempstr = mystrconcat(tempstr, ")");
	temptxt->SetText(tempstr);
	

//empty accept...

	tempchk = static_cast <BCheckBox*> (FindView("New Cards - Flip"));
	tempchk->SetValue(current_props->flip_to_orient);
	
	tempfield = static_cast <BMenuField*> (FindView("New Cards - Orientation"));
	tempfield->Menu()->FindItem(current_props->req_orient)->SetMarked(true);
	
	temptxt = static_cast <BTextControl*> (FindView("Deal String"));
	temptxt->SetText( mystrconcat(current_props->dealstring, "") );	

	temptxt = static_cast <BTextControl*> (FindView("ID"));
	temptxt->SetText( mystrconcat(current_props->IDstring, "") );	

	Unlock();
};

void PileEditor::Add_Target(BView* trgt)
{
//no do trick	
//	trgt->Invalidate(Bounds());
trgt->Draw(trgt->Bounds());

	targets.push_back(trgt);
};

void PileEditor::CleanUp()
{
	BMenuField* menufield;
	BMenuItem* item;
	int numitems;
	
	menufield = static_cast <BMenuField*> (FindView("Accept On Empty - Value"));
	numitems = menufield->Menu()->CountItems() - 1;
	for (; numitems >= 0; --numitems)
	{
		item = menufield->Menu()->RemoveItem(numitems);
		delete item;
	};

	menufield = static_cast <BMenuField*> (FindView("Accept On Empty - Suit"));
	numitems = menufield->Menu()->CountItems() - 1;
	for (; numitems >= 0; --numitems)
	{
		item = menufield->Menu()->RemoveItem(numitems);
		delete item;
	};

	menufield = static_cast <BMenuField*> (FindView("Pile Ordering - Value Steps"));
	numitems = menufield->Menu()->CountItems() - 1;
	for (; numitems >= 0; --numitems)
	{
		item = menufield->Menu()->RemoveItem(numitems);
		delete item;
	};

	menufield = static_cast <BMenuField*> (FindView("Pile Ordering - Suit Steps"));
	numitems = menufield->Menu()->CountItems() - 1;
	for (; numitems >= 0; --numitems)
	{
		item = menufield->Menu()->RemoveItem(numitems);
		delete item;
	};

};
void PileEditor::Remove_Target(BView* trgt)
{
	targets.remove(trgt);
};

void PileEditor::piles_added(BMessage* message)
{
	char* tempstr;
	int index = 0;
	status_t errcode = B_OK;
	BMenuField* tomenu = static_cast <BMenuField*> (FindView("Card Popping - To"));
	BMenuItem* toname;
	BMessage* msg = new BMessage(POP_TO_CHANGED);
	
	msg->AddString("IDstring", "");
	errcode = message->FindString("IDstring", index++, (const char**) &tempstr);
	while (errcode == B_OK)
	{
		msg->ReplaceString("IDstring", mystrconcat(tempstr,""));
		toname = new BMenuItem(mystrconcat(tempstr,""), msg);
		tomenu->Menu()->AddItem(toname);

		errcode = message->FindString("IDstring", index++, (const char**) &tempstr);
	};
};

void PileEditor::pile_removed(int index)
{
	static_cast <BMenuField*> (FindView("Card Popping - To"))->Menu()->RemoveItem(index);	
};

// Handling of user interface and other events
void PileEditor::MessageReceived(BMessage *message)
{

	switch(message->what){
		case IE_PILEEDITOR_ACCEPTONEMPTYSUIT_TOGGLE_ALL:
		case IE_PILEEDITOR_ACCEPTONEMPTYVALUE_TOGGLE_ALL:
		case IE_PILEEDITOR_PILEORDERINGSUITSTEPS_TOGGLE_ALL:
		case IE_PILEEDITOR_PILEORDERINGVALUESTEPS_TOGGLE_ALL:
		{
			BMenuField* menufield;
			char* label = NULL;
			int32 maxitemindex = -1, minitemindex = -1;
			switch (message->what)
			{
				case IE_PILEEDITOR_PILEORDERINGVALUESTEPS_TOGGLE_ALL:
				{
					message->what = VALUE_STEPS_CHANGED;
					menufield = static_cast <BMenuField*> (FindView("Pile Ordering - Value Steps"));
					label = "value step";
					maxitemindex = (menufield->Menu()->CountItems() - 1 - 2)/2;
					minitemindex = -maxitemindex;
					break;
				};
				case IE_PILEEDITOR_PILEORDERINGSUITSTEPS_TOGGLE_ALL: 
				{
					message->what = SUIT_STEPS_CHANGED;
					menufield = static_cast <BMenuField*> (FindView("Pile Ordering - Suit Steps"));
					label = "suit step";
					maxitemindex = (menufield->Menu()->CountItems() - 1 - 2)/2;
					minitemindex = -maxitemindex;
					break;
				};
				case IE_PILEEDITOR_ACCEPTONEMPTYSUIT_TOGGLE_ALL:
				{
					message->what = AOE_SUIT_CHANGED;
					menufield = static_cast <BMenuField*> (FindView("Accept On Empty - Suit"));
					label = "aoe suit";
					maxitemindex = menufield->Menu()->CountItems() - 1 - 2;
					minitemindex = 0;
					break;
				};
				case IE_PILEEDITOR_ACCEPTONEMPTYVALUE_TOGGLE_ALL:
				{
					message->what = AOE_VALUE_CHANGED;
					menufield = static_cast <BMenuField*> (FindView("Accept On Empty - Value"));
					label = "aoe value";
					maxitemindex = menufield->Menu()->CountItems() - 1 - 2;
					minitemindex = 0;
					break;
				};
			};			
			
			message->AddInt32 (label, 0);
			for (int32 i = minitemindex; i <= maxitemindex; i++)
			{
				message->ReplaceInt32(label, i);
				MessageReceived(message);
			}; 
			break;
		};
		case SUIT_STEPS_CHANGED:
		{
			int32 stepping = 0;
			bool stepstate;
			message->FindInt32 ("suit step", &stepping);
			BMenuField* menufield = static_cast <BMenuField*> (FindView("Pile Ordering - Suit Steps"));
			BMenuItem* menuitem = menufield->Menu()->FindItem(IntToStr(stepping));
			
			stepstate = menuitem->IsMarked();
			if (stepstate) current_props->ordering->suitsteps.remove(stepping);
			else current_props->ordering->suitsteps.push_back(stepping);
			
			menuitem->SetMarked(!stepstate);
			break;
		};
		case VALUE_STEPS_CHANGED:
		{
			int32 stepping = 0;
			bool stepstate;
			message->FindInt32 ("value step", &stepping);
			BMenuField* menufield = static_cast <BMenuField*> (FindView("Pile Ordering - Value Steps"));
			BMenuItem* menuitem = menufield->Menu()->FindItem(IntToStr(stepping));
			
			stepstate = menuitem->IsMarked();
			if (stepstate) current_props->ordering->valuesteps.remove(stepping);
			else current_props->ordering->valuesteps.push_back(stepping);
			
			menuitem->SetMarked(!stepstate);
			break;
		};
		case AOE_SUIT_CHANGED:
		{
			int32 aoe = 0;
			bool aoestate;
			message->FindInt32 ("aoe suit", &aoe);
			BMenuField* menufield = static_cast <BMenuField*> (FindView("Accept On Empty - Suit"));
			BMenuItem* menuitem = menufield->Menu()->FindItem(IntToStr(aoe));
			
			aoestate = menuitem->IsMarked();
			if (aoestate) current_props->emptyacceptsuit.remove(aoe);
			else current_props->emptyacceptsuit.push_back(aoe);
			
			menuitem->SetMarked(!aoestate);
			break;
		};
		case AOE_VALUE_CHANGED:
		{
			int32 aoe = 0;
			bool aoestate;
			message->FindInt32 ("aoe value", &aoe);
			BMenuField* menufield = static_cast <BMenuField*> (FindView("Accept On Empty - Value"));
			BMenuItem* menuitem = menufield->Menu()->FindItem(IntToStr(aoe));
			
			aoestate = menuitem->IsMarked();
			if (aoestate) current_props->emptyacceptvalue.remove(aoe);
			else current_props->emptyacceptvalue.push_back(aoe);
			
			menuitem->SetMarked(!aoestate);
			break;
		};
		case LAYOUT_DATA:
		{
			piles_added(message);
			
			deck_info* dinfo = new deck_info;
			ssize_t numbytes;
			message->FindData("deck info", 'DkDt', (const void**) &(dinfo), &numbytes);
			BMenuItem* item;
			BMenuField* menu;
			BMessage* msg;		

			menu = static_cast <BMenuField*> (FindView("Pile Ordering - Suit Steps"));
			for (int i = dinfo->num_suits - 1; i > 0; i--)
			{
				msg = new BMessage(SUIT_STEPS_CHANGED);			
				msg->AddInt32("suit step", -i);
				item = new BMenuItem(Int32ToStr(-i), msg);
				menu->Menu()->AddItem(item);
			};
			for (int i = 0; i < dinfo->num_suits; i++)
			{
				msg = new BMessage(SUIT_STEPS_CHANGED);			
				msg->AddInt32("suit step", i);
				item = new BMenuItem(Int32ToStr(i), msg);
				menu->Menu()->AddItem(item);
			};
			
			menu = static_cast <BMenuField*> (FindView("Pile Ordering - Value Steps"));
			for (int i = dinfo->num_values - 1; i > 0; i--)
			{
 				msg = new BMessage(VALUE_STEPS_CHANGED);			
				msg->AddInt32("value step", -i);
				item = new BMenuItem(Int32ToStr(-i), msg);
				menu->Menu()->AddItem(item);
			};
			for (int i = 0; i < dinfo->num_values; i++)
			{
 				msg = new BMessage(VALUE_STEPS_CHANGED);			
				msg->AddInt32("value step", i);
				item = new BMenuItem(Int32ToStr(i), msg);
				menu->Menu()->AddItem(item);
			};

			menu = static_cast <BMenuField*> (FindView("Accept On Empty - Suit"));
			for (int i = 0; i < dinfo->num_suits; i++)
			{
 				msg = new BMessage(AOE_SUIT_CHANGED);			
				msg->AddInt32("aoe suit", i);
				item = new BMenuItem(Int32ToStr(i), msg);
				menu->Menu()->AddItem(item);
			};

			menu = static_cast <BMenuField*> (FindView("Accept On Empty - Value"));
			for (int i = 0; i < dinfo->num_values; i++)
			{
 				msg = new BMessage(AOE_VALUE_CHANGED);			
				msg->AddInt32("aoe value", i);
				item = new BMenuItem(Int32ToStr(i), msg);
				menu->Menu()->AddItem(item);
			};
			break;
		};
		case POP_TO_CHANGED:
		{
			char* tempstr;
			message->FindString("IDstring", (const char**) &tempstr);
			current_props->popping->toID = mystrconcat(tempstr, "");
			break;
		};
		case POP_EDIT:
		{
			status_t errcode;			
			BMessage* pilemsg = new BMessage();

			errcode = message->FindMessage("pile props", pilemsg);						
			if (errcode == B_OK)
			{
				current_props->UnEncapsulate(pilemsg);
			}
			else beep();
			
			Reset();
			break;
		};
		case IE_PILEEDITOR_ID:
		{
			BTextControl* textcontrol;
			textcontrol = static_cast <BTextControl*> (FindView("ID"));
			current_props->IDstring = mystrconcat(textcontrol->Text(), "");	
			break;
		};
		case IE_PILEEDITOR_PILEORDERINGNONE:	// 'Pile Ordering - None' is pressed...
		{	
			if (current_props->ordering != NULL) {delete (current_props->ordering); current_props->ordering = NULL;};

			static_cast <BControl*> (FindView("cycle suits"))->SetEnabled(false);
			static_cast <BControl*> (FindView("cycle values"))->SetEnabled(false);
			static_cast <BMenuField*> (FindView("Pile Ordering - Suit Steps"))->SetEnabled(false);
			static_cast <BMenuField*> (FindView("Pile Ordering - Value Steps"))->SetEnabled(false);

			break;
		};
		case IE_PILEEDITOR_PILEORDERINGSOME:	// 'Pile-Ordering - Some' is pressed...
		{
			if (current_props->ordering == NULL) current_props->ordering = new order_props();
			
			static_cast <BControl*> (FindView("cycle suits"))->SetEnabled(true);
			static_cast <BControl*> (FindView("cycle values"))->SetEnabled(true);
			static_cast <BMenuField*> (FindView("Pile Ordering - Suit Steps"))->SetEnabled(true);
			static_cast <BMenuField*> (FindView("Pile Ordering - Value Steps"))->SetEnabled(true);
//alter steppings			
			static_cast <BControl*> (FindView("cycle suits"))->SetValue(current_props->ordering->cyclesuits);
			static_cast <BControl*> (FindView("cycle values"))->SetValue(current_props->ordering->cyclevalues);
			break;
		};
		case IE_PILEEDITOR_CYCLESUITS:	// 'cycle suits' is pressed...
		{
			current_props->ordering->cyclesuits = (static_cast <BControl*> (FindView("cycle suits"))->Value()); 
			break;
		};
		case IE_PILEEDITOR_CYCLEVALUES:	// 'cycle values' is pressed...
		{
			current_props->ordering->cyclevalues = (static_cast <BControl*> (FindView("cycle values"))->Value()); 
			break;
		};
		case IE_PILEEDITOR_DEALSTRING:	// Enter is pressed in 'Deal String'...
		{
			BTextControl* textcontrol;
			textcontrol = static_cast <BTextControl*> (FindView("Deal String"));
			current_props->dealstring = mystrconcat(textcontrol->Text(), "");	
			break;
		};
		case IE_PILEEDITOR_CARDPOPPINGNONE:	// 'Card Popping - None' is pressed...
		{
			if (current_props->popping != NULL) {delete (current_props->popping); current_props->popping = NULL;};

			static_cast <BControl*> (FindView("Card Popping - # times"))->SetEnabled(false);
			static_cast <BControl*> (FindView("Card Popping - numcards"))->SetEnabled(false);

			static_cast <BMenuField*> (FindView("Card Popping - To"))->SetEnabled(false);

			break;
		};
		case IE_PILEEDITOR_CARDPOPPINGSOME:// 'Card Popping - Some' is pressed...
		{
			if (current_props->popping == NULL) current_props->popping = new card_pop_prop;
			current_props->popping->toID = "";
			
			static_cast <BControl*> (FindView("Card Popping - # times"))->SetEnabled(true);
			static_cast <BControl*> (FindView("Card Popping - numcards"))->SetEnabled(true);
			static_cast <BMenuField*> (FindView("Card Popping - To"))->SetEnabled(true);

			static_cast <BTextControl*> (FindView("Card Popping - # times"))->SetText( IntToStr(current_props->popping->numtimes) );
			static_cast <BTextControl*> (FindView("Card Popping - numcards"))->SetText( IntToStr(current_props->popping->numcards) );
			break;
		};
		case IE_PILEEDITOR_CARDPOPPINGTIMES:	// Enter is pressed in 'Card Popping - # times'...
		{
			BTextControl* textcontrol;
			textcontrol = static_cast <BTextControl*> (FindView("Card Popping - # times"));
			current_props->popping->numtimes = atoi(textcontrol->Text());	
			break;
		};
		case IE_PILEEDITOR_CARDPOPPINGNUMCARDS:	// Enter is pressed in 'Card Popping - # times'...
		{
			BTextControl* textcontrol;
			textcontrol = static_cast <BTextControl*> (FindView("Card Popping - numcards"));
			current_props->popping->numcards = atoi(textcontrol->Text());	
			break;
		};
		case IE_PILEEDITOR_EMPTYONWIN:	// 'Empty on Win' is pressed...
		{
			current_props->emptyonwin = !current_props->emptyonwin;
			break;
		};
		case IE_PILEEDITOR_SCORINGADD:	// Enter is pressed in 'Scoring - Add'...
		{
			BTextControl* textcontrol;
			textcontrol = static_cast <BTextControl*> (FindView("Scoring - Add"));
			current_props->ptaddcards = atoi(textcontrol->Text());	
			break;
		};
		case IE_PILEEDITOR_SCORINGREMOVE:	// Enter is pressed in 'Scoring - Remove'...
		{
			BTextControl* textcontrol;
			textcontrol = static_cast <BTextControl*> (FindView("Scoring - Add"));
			current_props->ptremovecards = atoi(textcontrol->Text());	
			break;
		};
		case IE_PILEEDITOR_NEWCARDSFLIP:	// 'New Cards - Flip' is pressed...
		{
			current_props->flip_to_orient = !(current_props->flip_to_orient);
			break;
		};
		case IE_PILEEDITOR_NEWCARDSOFFSETUP:	// Enter is pressed in 'New Cards - Offset'...
		{
			BTextControl* textcontrol;
			textcontrol = static_cast <BTextControl*> (FindView("New Cards - Offsetup"));
			
			int16 max;
			int16* temp = StrToIntArray(textcontrol->Text(), &max);			
			if (max >= 2) current_props->offsetup = BPoint(temp[0], temp[1]);	
			else beep();			
			break;
		};
		case IE_PILEEDITOR_NEWCARDSOFFSETDOWN:	// Enter is pressed in 'New Cards - Offset'...
		{
			BTextControl* textcontrol;
			textcontrol = static_cast <BTextControl*> (FindView("New Cards - Offsetdown"));
			
			int16 max;
			int16* temp = StrToIntArray(textcontrol->Text(), &max);			
			if (max >= 2) current_props->offsetdown = BPoint(temp[0], temp[1]);	
			else beep();			
			break;
		};
		case IE_PILEEDITOR_NEWCARDSORIENTATION_FACE_UP:	// "face up" is selected from menufield 'New Cards - Orientation'
		case IE_PILEEDITOR_NEWCARDSORIENTATION_FACE_DOWN:	// "face down" is selected from menufield 'New Cards - Orientation'
		case IE_PILEEDITOR_NEWCARDSORIENTATION_NO_PREF_:	// "no pref." is selected from menufield 'New Cards - Orientation'
		{
			current_props->req_orient = message->what;
			break;
		};
		case IE_PILEEDITOR_UPDATE:	// 'update' is pressed...
		{
//update IDstrings list here too (used for card popping... not implemented fully)
			list<BView*>::iterator iter = targets.begin();
			message->MakeEmpty();
			status_t errcode;
			
			BMessage* pilemsg = current_props->Encapsulate();
			int32 index = 0;
			errcode = message->AddMessage("pile props", pilemsg);
			message->AddInt32 ("number", index);		
			while ( iter != targets.end() )
			{
				(*iter)->MessageReceived(message);
				index++;
				message->ReplaceInt32("number", index);
				iter++;
			};
			break;
		};
		default:
		{
			inherited::MessageReceived(message);
			break;
		};
	}

}
